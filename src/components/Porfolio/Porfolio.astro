---
import PorfolioItem from "./PorfolioItem.astro";
import PorfolioGallery from "./PorfolioGallery.astro";
//import PorfolioItem from "./PorfolioItem.jsx"
import Tailwind from "../icons/Tailwind.astro";
import React from "../icons/React.astro";
import NextJs from "../icons/NextJs.astro";
import Supabase from "../icons/Supabase.astro";
import PostgreSQL from "../icons/PostgreSQL.astro";
import Python from "../icons/Python.astro";
import Gears from "../icons/Gears.astro";
import Document from "../icons/Document.astro";
import Users from "../icons/Users.astro";
import Typescript from "../icons/Typescript.astro";
import Laravel from "../icons/Laravel.astro";
import Prisma from "../icons/Prisma.astro";
import Docker from "../icons/Docker.astro";
import Database from "../icons/Database.astro";
import Frontend from "../icons/Frontend.astro";
import Table from "../icons/Table.astro";

import { imageConfig } from "astro:assets";
import { transitionEnabledOnThisPage } from "astro:transitions/client";

const TAGS = {
  REACT: {
    name: "React",
    classColor: "bg-[#23262e] text-[#59c5dc]",
    icon: React,
  },
  NEXT: {
    name: "Nextjs",
    classColor: "bg-black text-white",
    icon: NextJs,
  },
  TAILWIND: {
    name: "Tailwindcss",
    classColor: "text-[#00bcff] bg-[#18242e]",
    icon: Tailwind,
  },
  SUPABASE: {
    name: "Supabase",
    classColor: "bg-[#1e1d23] text-[#45d092]",
    icon: Supabase,
  },
  POSTGRESQL: {
    name: "PostgreSQL",
    classColor: "bg-gray-200 text-[#30648a]",
    icon: PostgreSQL,
  },
  LARAVEL: {
    name: "Laravel",
    classColor: "bg-[#f8322d] text-white",
    icon: Laravel,
  },
  TYPSECRIPT: {
    name: "Typescript",
    classColor: "bg-[#3078c7] text-white",
    icon: Typescript,
  },
  PRISMA: {
    name: "Prisma",
    classColor: "bg-[#434190] text-white",
    icon: Prisma,
  },
  DOCKER: {
    name: "Docker",
    classColor: "bg-[#008fe2] text-white",
    icon: Docker,
  },
  PYTHON: {
    name: "Python",
    classColor: "bg-[#114673] text-[#E4C657] fill-[#E4C657]",
    icon: Python
  }
};

const PROJECTS = [
  {
    id: 1,
    name: "Sistema de gestión académico",
    tags: [
      TAGS.REACT,
      TAGS.NEXT,
      TAGS.TAILWIND,
      TAGS.SUPABASE,
      TAGS.POSTGRESQL,
      TAGS.PYTHON
    ],
    description:
      "Este sistema le permite al cliente administrar y ejecutar " +
      "las actividades del día a día dentro de una academia de Inglés. " +
      "En este se gestionan usuarios, clientes, alumnos, maestros, cursos, " +
      "clases, asistencias.",
    images: [
      {
        id: 1,
        src: "/ih_mockup.webp",
        alt: "IH Mockup",
        dataSrc: "/ih_mockup.webp"
      },
      {
        id: 2,
        src: "/ih_mockup.webp",
        alt: "IH Mockup",
        dataSrc: "/ih_mockup.webp"
      },
    ],
    button: true,
    repository: false,
    features: [
    {
        id: 1,
        active: true,
        name: "DB & Backend",
        icon: Database,
        description:
          "La BD y el backend fueron creados y desplegados mediante Supabase. Se replicó y mejoró el ERD del antiguo sistema. Se utilizaron " +
          "métodos de transformación de datos mediante scripts de Python para la migración de datos históricos y queries en SQL para " +
          "completar campos y relaciones entre tablas."
      },
      {
        id: 2,
        active: false,
        name: "Frontend",
        icon: Frontend,
        description:
          "Construido con React, Nextjs, Tailwind y el uso de librerías de soporte. Los datos mostrados son consumidos mediante la API de Supabase y " +
          "las rutas son protegidas mediante roles de usuario. Diseño basado en frames de Figma.",
        tags: ["Python", "Excel", "PgAdmin"],
      },
      {
        id: 3,
        active: false,
        name: "Funcionalidades clave",
        icon: Gears,
        description:
          "Sistema para la gestión de datos maestros (clientes, alumnos, maestros, etc.). Organización de grupos, cursos, niveles y materiales. Generación de cursos y " +
          "creación automática del calendario de clases, así como cambios de frecuencia. Generación automática de reportes y diplomas. Registro de asistencias por clase. " +
          "Calendarios para maestros y administradores.",
        tags: ["Nextjs", "Tailwind", "Supabase"],
      }
    ],
  },
  {
    id: 2,
    name: "Punto de Venta para cafetería",
    tags: [TAGS.TYPSECRIPT, TAGS.REACT, TAGS.NEXT, TAGS.TAILWIND, TAGS.PRISMA],
    description:
      "Herramienta enfocada para una red local de restaurante o cafetería. " +
      "Le permite presentar a sus clientes un menú de selección para ordenar. " +
      "También es posible gestionar las órdenes en cocina, mostrar pedidos listos " +
      "y gestionar los productos mostrados.",
    images: [
      {
        id: 1,
        src: "/pos_mockup.webp",
        alt: "POS Mockup",
        dataSrc: "/pos_mockup.webp"

      },
      {
        id: 2,
        src: "/pos_orders.webp",
        alt: "POS Mockup Orders",
        dataSrc: "/pos_orders.webp"

      },
      {
        id: 3,
        src: "/pos_products.webp",
        alt: "Coffee Mockup Products",
        dataSrc: "/pos_products.webp"
      },
    ],
    button: true,
    repository: "https://github.com/SisniegaDaan/pos-coffee.git",
    features: [
    {
        id: 1,
        active: false,
        name: "Base de datos",
        icon: Database,
        description:
          "La base de datos usada para este proyecto está desplegada en Render y conectada remotamente. Actualmente, para esta demo, " +
          "está bajo plan gratuito por lo que es posible que al momento de ingresar, debas autorizar tu ingreso al sitio y/o el servicio de la BD haya caducado.",
      },  
      {
        id: 2,
        active: false,
        name: "Backend",
        icon: Gears,
        description:
          "El ORM usado para este proyecto es Prisma, junto con sus servicios de Prisma-Client para el fetching a la base de datos, " +
          "Prisma Migrate para la generación de tablas y Prisma Studio para el cliente de la BD. Todo dentro de Next.js. Se implementaron server " +
          "actions para almaceamiento de órdenes y productos."
      },
      {
        id: 3,
        active: false,
        name: "Frontend",
        icon: Frontend,
        description:
          "Se utilizó el store de zustand para el manejo de estado de las ordenes. Los formularios se lograron validar con zod " +
          "tanto en cliente como en servidor. También se implementó el servicio de Cloudinary para poder trabajar con las imágenes " +
          "de los productos y almacenarlas. Los estilos se construyeron mediante Tailwind." 
      }
  ],
  },
  {
    id: 3,
    name: "Red social con Laravel",
    tags: [TAGS.DOCKER, TAGS.LARAVEL, TAGS.TAILWIND],
    description:
      "Proyecto que cubre las funciones más usadas de una red social " +
      "como crear tu perfil, subir publicaciones, seguir personas, comentar, dar likes, " +
      "ver tu feed, ¡y más!",
    images: [
      {
        id: 1,
        src: "/devstagram_mockup.webp",
        alt: "Devstagram Mockup",
        dataSrc: "/devstagram_mockup.webp"
      },
      {
        id: 2,
        src: "/devstagram_post.webp",
        alt: "Devstagram Post Mockup",
        dataSrc: "/devstagram_post.webp"
      },
      {
        id: 3,
        src: "/devstagram_upload.webp",
        alt: "Devstagram Upload Mockup",
        dataSrc: "/devstagram_upload.webp"
      },
      {
        id: 4,
        src: "/devstagram_signin.webp",
        alt: "Devstagram SignIn Mockup",
        dataSrc: "/devstagram_signin.webp"
      },
    ],
    button: true,
    repository: "https://github.com/SisniegaDaan/devstagram.git",
    features: [
    {
        id: 1,
        active: false,
        name: "Base de datos",
        icon: Database,
        description:
          "Con la ayuda de Docker se generó todo el ambiente  para el desarrollo de esta aplicación, dentro de este, se incluía una base de datos " +
          "MySQL. El proyecto completo fue construido con Laravel siguiento el patrón MVC." 
      },
      {
        id: 2,
        active: false,
        name: "Modelos",
        icon: Table,
        description:
          "Se llevó un control sobre las tablas mediante migraciones con el CLI de Laravel (artisan). Se utilizó la autenticación que ofrece Laravel más algunos ajustes en " +
          "'users'. Se modelaron tanto las tablas, como las relaciones entre ellas, mediante el ORM Eloquent, como la relación Post-User, Post-Likes, Post-Comments, User-Followers." 
      },
      {
        id: 3,
        active: false,
        name: "Rutas y Controladores",
        icon: Gears,
        description:
          "Se crearon rutas controladas para cada acción dentro de la app como realizar Login, Crear Cuenta, Likear Posts, Crear Publicación, etc., junto a toda la lógica como " +
          "validaciones, hasheo de passwords, etc., y a su vez, también métodos especificos de consulta de vistas como ver el feed " +
          "o posts específicos, siguiendo la documentación de Laravel."
      },
      {
        id: 4,
        active: false,
        name: "Vistas",
        icon: Frontend,
        description:
          "Se estableció el Layout de la página y componentes y vistas con blade para mostrar la información proporcionada por los controladores y métodos de consulta de Eloquent. " +
          "Se implementó la librería Livewire para la interacción con el botón de like y diferentes formularios con subida de archivos. Las diferentes directivas de Laravel para agregar lógica y seguridad " +
          "a las vistas. En cuanto a estilos se usó Tailwind."
      },

    ],
  },
];
---

<section
  id="porfolio"
  class="container mx-auto md:max-w-2xl lg:max-w-4xl mb-20"
>
  <h2 class="font-bold text-center text-3xl mb-10">Portafolio</h2>
  {
    PROJECTS.map((project) => (
      <PorfolioItem key={project.id} project={project} />
    ))
  }
</section>
